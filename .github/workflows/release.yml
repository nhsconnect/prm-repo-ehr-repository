name: Release

on:
  workflow_run:
    workflows: [Build]
    types:
      - completed

permissions:
  contents: read  # Required for actions/checkout
  id-token: write # Required for requesting the JWT

jobs:
  release:
    if: ${{ (github.event.workflow_run.conclusion == 'success') && (github.event_name == 'push') }}
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        environment: [test-deploy, pre-prod-deploy, prod-deploy]
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Get Environment Name
        id: get-environment
        run: |
          name=$(echo ${{ matrix.environment }} | sed 's/-deploy//g')
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Set up git repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-2
          mask-aws-account-id: true

      - name: terraform fmt
        id: fmt
        working-directory: ./
        run: terraform fmt -recursive -check

      - name: terraform init
        id: init
        run: terraform init -no-color -upgrade -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"

      - name: terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Get ECR Holding Account ID
        id: ecr-holding-account
        run: |
          accountid=$(echo ${{ secrets.IAM_ROLE_ECR_HOLDING_ACCOUNT_READ_WRITE }} | sed 's/^.*:://g' | sed 's/:.*//g')
          echo "accountid=$accountid" >> $GITHUB_OUTPUT

      # Needs the AmazonEC2ContainerRegistryPowerUser role
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ steps.creds.outputs.aws-account-id }},${{ steps.ecr-holding-account.outputs.accountid }}"

      - name: ECR Copy
        id: ecr-copy
        run: |
          source_repo=${{ steps.ecr-holding-account.outputs.accountid }}.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:main
          destination_repo=${{ steps.creds.outputs.aws-account-id }}.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:main
          docker pull $source_repo
          docker tag $source_repo $destination_repo
          docker push $destination_repo

        ## REPOSITORY SPECIFIC ##
      - name: Setup Terraform variables
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          task_image_tag = "main"
          EOF

      - name: terraform plan
        id: plan
        run: terraform plan -var-file="${{ steps.ecr-holding-account.outputs.name }}.tfvars" -no-color -out=tfplan

      - name: terraform apply
        id: apply
        run: terraform apply -no-color tfplan

      - name: Wait for ECS
        id: ecs
        env:
          SERVICE_NAME: ehr-repo
        run: aws ecs wait services-stable --region eu-west-2 --cluster ${{ steps.ecr-holding-account.outputs.name }}-$SERVICE_NAME-ecs-cluster --services ${{ steps.ecr-holding-account.outputs.name }}-$SERVICE_NAME-service

      # TODO) Needs connecting to a VPN before it can do this...
      #       AND changing from `.non-prod`...
      # - name: /health
      #   id: health
      #   env:
      #     SERVICE_NAME: ehr-repo
      #   run: |
      #     nslookup "$SERVICE_NAME.dev.non-prod.patient-deductions.nhs.uk"
      #     curl -i --fail "https://$SERVICE_NAME.${{ steps.ecr-holding-account.outputs.name }}.non-prod.patient-deductions.nhs.uk/health"
